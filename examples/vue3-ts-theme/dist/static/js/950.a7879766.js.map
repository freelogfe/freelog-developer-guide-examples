{"version":3,"file":"static/js/950.a7879766.js","mappings":"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","sources":["webpack://vue3-ts-theme-[name]/./src/views/widget/WidgetMount.vue?8b2d","webpack://vue3-ts-theme-[name]/./src/views/widget/WidgetMount.vue","webpack://vue3-ts-theme-[name]/./src/views/widget/WidgetMount.vue?efce"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-100x h-100x p-40 flex-column\" }\nconst _hoisted_2 = { class: \"flex-column\" }\nconst _hoisted_3 = { class: \"flex-row mb-20\" }\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"freelog-self\" }, null, -1)\nconst _hoisted_5 = { class: \"flex-column\" }\nconst _hoisted_6 = { class: \"flex-row mb-20\" }\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"freelog-exhibit\" }, null, -1)\n\nimport { freelogApp } from \"freelog-runtime\";\nimport { onBeforeUnmount, ref } from \"vue\";\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'WidgetMount',\n  setup(__props) {\n\nconst activeKey = ref(\"1\");\nlet selfWidget: any = null;\nlet exhibitWidget: any = null;\n\nconst add = () => {\n  // 获取插件暴露的api\n  selfWidget.getApi().changeMe();\n};\nconst add2 = () => {\n  // 获取插件暴露的api\n  exhibitWidget.getApi().changeMe();\n};\nconst reload = (obj: any) => {\n  obj.unmount();\n  obj.unmountPromise.then(() => {\n    // 插件卸载完成 setTimeout只是为了效果，可以直接加载\n    setTimeout(() => {\n      obj.mount();\n      obj.mountPromise.then(() => {\n        // 加载完成后\n      });\n    }, 500);\n  });\n};\nconst mountSubWidget = async () => {\n  const subData = await freelogApp.getSubDep();\n  subData.subDep.forEach(async (sub: any, index: number) => {\n    if (sub.name === \"snnaenu/插件开发演示代码插件\") {\n      selfWidget = await freelogApp.mountWidget({\n        widget: sub, // 必传，子插件数据\n        container: document.getElementById(\"freelog-self\"), // 必传，自定义一个让插件挂载的div容器\n        topExhibitData: subData, // 必传，最外层展品数据（子孙插件都需要用）\n        config: {\n          name: \"我是主题依赖的插件\",\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\n        seq: 0, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\n        // widget_entry: \"https://localhost:8002\", // 本地url，dev模式下，可以使用本地url调试子插件\n      });\n      // 使用此函数可以保证在插件加载完成后 再执行\n      selfWidget.mountPromise.then(() => {\n       // do something\n      });\n    }\n  });\n};\nconst mountExhibitWidget = async () => {\n  const res = await freelogApp.getExhibitListByPaging({\n    articleResourceTypes: \"插件\",\n    isLoadVersionProperty: 1,\n  });\n  const widgets = res.data.data.dataList;\n\n  widgets.forEach(async (widget: any, index: number) => {\n    console.log(widget, \"snnaenu/插件开发演示代码插件\")\n\n    if (widget.articleInfo.articleName == \"snnaenu/插件开发演示代码插件\") {\n\n      // widget.exhibitId = widget.exhibitId + '111'\n      exhibitWidget = await freelogApp.mountWidget({\n        widget: widget, // 必传，子插件数据\n        container: document.getElementById(\"freelog-exhibit\"), // 必传，自定义一个让插件挂载的div容器\n        topExhibitData: null, // 必传，最外层展品数据（子孙插件都需要用）\n        config: {\n          name: \"我是展品类型的插件\",\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\n        seq: 1, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\n        widget_entry: \"https://localhost:8002\", // 本地url，dev模式下，可以使用本地url调试子插件\n      });\n      return true;\n    }\n    return false\n  });\n};\n// 离开记得卸载插件喔\nonBeforeUnmount( () => {\n   selfWidget?.unmount();\n   exhibitWidget?.unmount();\n});\nmountExhibitWidget();\nmountSubWidget();\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_a_button = _resolveComponent(\"a-button\")!\n  const _component_a_tab_pane = _resolveComponent(\"a-tab-pane\")!\n  const _component_a_tabs = _resolveComponent(\"a-tabs\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_a_tabs, {\n      activeKey: activeKey.value,\n      \"onUpdate:activeKey\": _cache[2] || (_cache[2] = ($event: any) => ((activeKey).value = $event))\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_a_tab_pane, {\n          key: \"1\",\n          tab: \"加载自身依赖的插件\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_2, [\n              _createElementVNode(\"div\", _hoisted_3, [\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: add\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"给自身依赖插件加1\")\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: _cache[0] || (_cache[0] = ($event: any) => (reload(_unref(selfWidget))))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"重新加载\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _hoisted_4\n            ])\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_a_tab_pane, {\n          key: \"2\",\n          tab: \"加载展品类型的插件\",\n          \"force-render\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_5, [\n              _createElementVNode(\"div\", _hoisted_6, [\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: add2\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"给展品依赖插件加1\")\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: _cache[1] || (_cache[1] = ($event: any) => (reload(_unref(exhibitWidget))))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"重新加载\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _hoisted_7\n            ])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }, 8, [\"activeKey\"])\n  ]))\n}\n}\n\n})","<!-- eslint-disable @typescript-eslint/no-unused-vars -->\n<!-- eslint-disable @typescript-eslint/no-explicit-any -->\n<template>\n  <div class=\"w-100x h-100x p-40 flex-column\">\n    <a-tabs v-model:activeKey=\"activeKey\">\n      <a-tab-pane key=\"1\" tab=\"加载自身依赖的插件\">\n        <div class=\"flex-column\">\n          <div class=\"flex-row mb-20\">\n            <a-button type=\"primary mr-30\" @click=\"add\"\n              >给自身依赖插件加1</a-button\n            >\n            <a-button type=\"primary mr-30\" @click=\"reload(selfWidget)\"\n              >重新加载</a-button\n            >\n          </div>\n          <div id=\"freelog-self\"></div>\n        </div>\n      </a-tab-pane>\n      <a-tab-pane key=\"2\" tab=\"加载展品类型的插件\" force-render>\n        <div class=\"flex-column\">\n          <div class=\"flex-row mb-20\">\n            <a-button type=\"primary mr-30\" @click=\"add2\"\n              >给展品依赖插件加1</a-button\n            >\n            <a-button type=\"primary mr-30\" @click=\"reload(exhibitWidget)\"\n              >重新加载</a-button\n            >\n          </div>\n          <div id=\"freelog-exhibit\"></div>\n        </div>\n      </a-tab-pane>\n    </a-tabs>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { freelogApp } from \"freelog-runtime\";\nimport { onBeforeUnmount, ref } from \"vue\";\nconst activeKey = ref(\"1\");\nlet selfWidget: any = null;\nlet exhibitWidget: any = null;\n\nconst add = () => {\n  // 获取插件暴露的api\n  selfWidget.getApi().changeMe();\n};\nconst add2 = () => {\n  // 获取插件暴露的api\n  exhibitWidget.getApi().changeMe();\n};\nconst reload = (obj: any) => {\n  obj.unmount();\n  obj.unmountPromise.then(() => {\n    // 插件卸载完成 setTimeout只是为了效果，可以直接加载\n    setTimeout(() => {\n      obj.mount();\n      obj.mountPromise.then(() => {\n        // 加载完成后\n      });\n    }, 500);\n  });\n};\nconst mountSubWidget = async () => {\n  const subData = await freelogApp.getSubDep();\n  subData.subDep.forEach(async (sub: any, index: number) => {\n    if (sub.name === \"snnaenu/插件开发演示代码插件\") {\n      selfWidget = await freelogApp.mountWidget({\n        widget: sub, // 必传，子插件数据\n        container: document.getElementById(\"freelog-self\"), // 必传，自定义一个让插件挂载的div容器\n        topExhibitData: subData, // 必传，最外层展品数据（子孙插件都需要用）\n        config: {\n          name: \"我是主题依赖的插件\",\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\n        seq: 0, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\n        // widget_entry: \"https://localhost:8002\", // 本地url，dev模式下，可以使用本地url调试子插件\n      });\n      // 使用此函数可以保证在插件加载完成后 再执行\n      selfWidget.mountPromise.then(() => {\n       // do something\n      });\n    }\n  });\n};\nconst mountExhibitWidget = async () => {\n  const res = await freelogApp.getExhibitListByPaging({\n    articleResourceTypes: \"插件\",\n    isLoadVersionProperty: 1,\n  });\n  const widgets = res.data.data.dataList;\n\n  widgets.forEach(async (widget: any, index: number) => {\n    console.log(widget, \"snnaenu/插件开发演示代码插件\")\n\n    if (widget.articleInfo.articleName == \"snnaenu/插件开发演示代码插件\") {\n\n      // widget.exhibitId = widget.exhibitId + '111'\n      exhibitWidget = await freelogApp.mountWidget({\n        widget: widget, // 必传，子插件数据\n        container: document.getElementById(\"freelog-exhibit\"), // 必传，自定义一个让插件挂载的div容器\n        topExhibitData: null, // 必传，最外层展品数据（子孙插件都需要用）\n        config: {\n          name: \"我是展品类型的插件\",\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\n        seq: 1, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\n        widget_entry: \"https://localhost:8002\", // 本地url，dev模式下，可以使用本地url调试子插件\n      });\n      return true;\n    }\n    return false\n  });\n};\n// 离开记得卸载插件喔\nonBeforeUnmount( () => {\n   selfWidget?.unmount();\n   exhibitWidget?.unmount();\n});\nmountExhibitWidget();\nmountSubWidget();\n</script>\n","import script from \"./WidgetMount.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./WidgetMount.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_","id","_hoisted_5","_hoisted_6","_hoisted_7","__name","setup","__props","activeKey","selfWidget","exhibitWidget","add","getApi","changeMe","add2","reload","obj","unmount","unmountPromise","then","setTimeout","mount","mountPromise","mountSubWidget","async","subData","freelogApp","subDep","forEach","sub","index","name","widget","container","document","getElementById","topExhibitData","config","seq","mountExhibitWidget","res","articleResourceTypes","isLoadVersionProperty","widgets","data","dataList","console","log","articleInfo","articleName","widget_entry","_ctx","_cache","_component_a_button","_component_a_tab_pane","_component_a_tabs","value","$event","default","key","tab","type","onClick","__exports__"],"sourceRoot":""}