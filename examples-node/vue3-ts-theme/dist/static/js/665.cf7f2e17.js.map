{"version":3,"file":"static/js/665.cf7f2e17.js","mappings":"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","sources":["webpack://vue3-ts-theme-/./src/views/widget/WidgetMount.vue?c370","webpack://vue3-ts-theme-/./src/views/widget/WidgetMount.vue","webpack://vue3-ts-theme-/./src/views/widget/WidgetMount.vue?ee40"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-100x h-100x p-40 flex-column\" }\nconst _hoisted_2 = { class: \"flex-column\" }\nconst _hoisted_3 = { class: \"flex-row mb-20\" }\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"freelog-self\" }, null, -1)\nconst _hoisted_5 = { class: \"flex-column\" }\nconst _hoisted_6 = { class: \"flex-row mb-20\" }\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"freelog-exhibit\" }, null, -1)\n\nimport {\r\n  freelogApp,\r\n  ExhibitAuthNodeInfo,\r\n  WidgetController,\r\n  ExhibitInfo,\r\n  GetExhibitListByPagingResult,\r\n} from \"freelog-runtime\";\r\nimport { onBeforeUnmount, ref } from \"vue\";\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'WidgetMount',\n  setup(__props) {\n\r\nconst activeKey = ref(\"1\");\r\nlet selfWidget: WidgetController = {} as WidgetController;\r\nlet exhibitWidget: WidgetController = {} as WidgetController;\r\nconst selfWidgetApi = ref({} as any);\r\nconst exhibitWidgetApi = ref({} as any);\r\n\r\nconst add = () => {\r\n  // 获取插件暴露的api\r\n  selfWidgetApi.value.changeMe();\r\n};\r\nconst add2 = () => {\r\n  // 获取插件暴露的api\r\n  exhibitWidgetApi.value.changeMe();\r\n};\r\nconst reload = (obj: any) => {\r\n  obj.reload().then((result: string) => {\r\n    if (result) {\r\n      console.log(\"重新渲染成功\");\r\n    } else {\r\n      console.log(\"重新渲染失败\");\r\n    }\r\n  });\r\n};\r\nconst mountSubWidget = async () => {\r\n  const subData: ExhibitAuthNodeInfo[] =\r\n    await freelogApp.getSelfDependencyTree();\r\n  subData.forEach(async (sub: ExhibitAuthNodeInfo) => {\r\n    if (sub.articleName === \"snnaenu/插件开发演示代码插件\") {\r\n      selfWidget = await freelogApp.mountArticleWidget({\r\n        articleId: sub.articleId,\r\n        parentNid: sub.parentNid,\r\n        nid: sub.nid,\r\n        topExhibitId: freelogApp.getTopExhibitId(),\r\n        container: document.getElementById(\"freelog-self\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        renderWidgetOptions: {\r\n          data: {\r\n            name: \"自身依赖插件\",\r\n            registerApi: (api: any) => {\r\n              selfWidgetApi.value = api;\r\n            },\r\n          },\r\n          lifeCycles: {\r\n            mounted: (e: CustomEvent) => {\r\n              console.log(e, \"mounted\");\r\n            },\r\n          },\r\n        },\r\n        seq: 0, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n    }\r\n  });\r\n};\r\nconst mountExhibitWidget = async () => {\r\n  const res: GetExhibitListByPagingResult =\r\n    await freelogApp.getExhibitListByPaging({\r\n      articleResourceTypes: \"插件\",\r\n      isLoadVersionProperty: 1,\r\n    });\r\n  const widgets = res.data.data?.dataList;\r\n\r\n  widgets.forEach(async (widget: ExhibitInfo, index: number) => {\r\n    if (widget.articleInfo.articleName == \"snnaenu/插件开发演示代码插件\") {\r\n      // widget.exhibitId = widget.exhibitId + '111'\r\n      exhibitWidget = await freelogApp.mountExhibitWidget({\r\n        exhibitId: widget.exhibitId,\r\n        container: document.getElementById(\"freelog-exhibit\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        property: widget.versionInfo?.exhibitProperty,\r\n        dependencyTree: widget.versionInfo?.dependencyTree,\r\n        renderWidgetOptions: {\r\n          data: {\r\n            name: \"展品插件\",\r\n            registerApi: (api: any) => {\r\n              exhibitWidgetApi.value = api;\r\n            },\r\n          },\r\n        },\r\n        seq: 1, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n};\r\n// 离开记得卸载插件喔\r\nonBeforeUnmount(async () => {\r\n  await exhibitWidget.unmount();\r\n  await selfWidget.unmount();\r\n});\r\nmountExhibitWidget();\r\nmountSubWidget();\r\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_a_button = _resolveComponent(\"a-button\")!\n  const _component_a_tab_pane = _resolveComponent(\"a-tab-pane\")!\n  const _component_a_tabs = _resolveComponent(\"a-tabs\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_a_tabs, {\n      activeKey: activeKey.value,\n      \"onUpdate:activeKey\": _cache[2] || (_cache[2] = ($event: any) => ((activeKey).value = $event))\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_a_tab_pane, {\n          key: \"1\",\n          tab: \"加载自身依赖的插件\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_2, [\n              _createElementVNode(\"div\", _hoisted_3, [\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: add\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"给自身依赖插件加1\")\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: _cache[0] || (_cache[0] = ($event: any) => (reload(_unref(selfWidget))))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"重新加载\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _hoisted_4\n            ])\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_a_tab_pane, {\n          key: \"2\",\n          tab: \"加载展品类型的插件\",\n          \"force-render\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_5, [\n              _createElementVNode(\"div\", _hoisted_6, [\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: add2\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"给展品依赖插件加1\")\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: _cache[1] || (_cache[1] = ($event: any) => (reload(_unref(exhibitWidget))))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"重新加载\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _hoisted_7\n            ])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }, 8, [\"activeKey\"])\n  ]))\n}\n}\n\n})","<!-- eslint-disable @typescript-eslint/no-unused-vars -->\r\n<!-- eslint-disable @typescript-eslint/no-explicit-any -->\r\n<template>\r\n  <div class=\"w-100x h-100x p-40 flex-column\">\r\n    <a-tabs v-model:activeKey=\"activeKey\">\r\n      <a-tab-pane key=\"1\" tab=\"加载自身依赖的插件\">\r\n        <div class=\"flex-column\">\r\n          <div class=\"flex-row mb-20\">\r\n            <a-button type=\"primary mr-30\" @click=\"add\"\r\n              >给自身依赖插件加1</a-button\r\n            >\r\n            <a-button type=\"primary mr-30\" @click=\"reload(selfWidget)\"\r\n              >重新加载</a-button\r\n            >\r\n          </div>\r\n          <div id=\"freelog-self\"></div>\r\n        </div>\r\n      </a-tab-pane>\r\n      <a-tab-pane key=\"2\" tab=\"加载展品类型的插件\" force-render>\r\n        <div class=\"flex-column\">\r\n          <div class=\"flex-row mb-20\">\r\n            <a-button type=\"primary mr-30\" @click=\"add2\"\r\n              >给展品依赖插件加1</a-button\r\n            >\r\n            <a-button type=\"primary mr-30\" @click=\"reload(exhibitWidget)\"\r\n              >重新加载</a-button\r\n            >\r\n          </div>\r\n          <div id=\"freelog-exhibit\"></div>\r\n        </div>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport {\r\n  freelogApp,\r\n  ExhibitAuthNodeInfo,\r\n  WidgetController,\r\n  ExhibitInfo,\r\n  GetExhibitListByPagingResult,\r\n} from \"freelog-runtime\";\r\nimport { onBeforeUnmount, ref } from \"vue\";\r\nconst activeKey = ref(\"1\");\r\nlet selfWidget: WidgetController = {} as WidgetController;\r\nlet exhibitWidget: WidgetController = {} as WidgetController;\r\nconst selfWidgetApi = ref({} as any);\r\nconst exhibitWidgetApi = ref({} as any);\r\n\r\nconst add = () => {\r\n  // 获取插件暴露的api\r\n  selfWidgetApi.value.changeMe();\r\n};\r\nconst add2 = () => {\r\n  // 获取插件暴露的api\r\n  exhibitWidgetApi.value.changeMe();\r\n};\r\nconst reload = (obj: any) => {\r\n  obj.reload().then((result: string) => {\r\n    if (result) {\r\n      console.log(\"重新渲染成功\");\r\n    } else {\r\n      console.log(\"重新渲染失败\");\r\n    }\r\n  });\r\n};\r\nconst mountSubWidget = async () => {\r\n  const subData: ExhibitAuthNodeInfo[] =\r\n    await freelogApp.getSelfDependencyTree();\r\n  subData.forEach(async (sub: ExhibitAuthNodeInfo) => {\r\n    if (sub.articleName === \"snnaenu/插件开发演示代码插件\") {\r\n      selfWidget = await freelogApp.mountArticleWidget({\r\n        articleId: sub.articleId,\r\n        parentNid: sub.parentNid,\r\n        nid: sub.nid,\r\n        topExhibitId: freelogApp.getTopExhibitId(),\r\n        container: document.getElementById(\"freelog-self\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        renderWidgetOptions: {\r\n          data: {\r\n            name: \"自身依赖插件\",\r\n            registerApi: (api: any) => {\r\n              selfWidgetApi.value = api;\r\n            },\r\n          },\r\n          lifeCycles: {\r\n            mounted: (e: CustomEvent) => {\r\n              console.log(e, \"mounted\");\r\n            },\r\n          },\r\n        },\r\n        seq: 0, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n    }\r\n  });\r\n};\r\nconst mountExhibitWidget = async () => {\r\n  const res: GetExhibitListByPagingResult =\r\n    await freelogApp.getExhibitListByPaging({\r\n      articleResourceTypes: \"插件\",\r\n      isLoadVersionProperty: 1,\r\n    });\r\n  const widgets = res.data.data?.dataList;\r\n\r\n  widgets.forEach(async (widget: ExhibitInfo, index: number) => {\r\n    if (widget.articleInfo.articleName == \"snnaenu/插件开发演示代码插件\") {\r\n      // widget.exhibitId = widget.exhibitId + '111'\r\n      exhibitWidget = await freelogApp.mountExhibitWidget({\r\n        exhibitId: widget.exhibitId,\r\n        container: document.getElementById(\"freelog-exhibit\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        property: widget.versionInfo?.exhibitProperty,\r\n        dependencyTree: widget.versionInfo?.dependencyTree,\r\n        renderWidgetOptions: {\r\n          data: {\r\n            name: \"展品插件\",\r\n            registerApi: (api: any) => {\r\n              exhibitWidgetApi.value = api;\r\n            },\r\n          },\r\n        },\r\n        seq: 1, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n};\r\n// 离开记得卸载插件喔\r\nonBeforeUnmount(async () => {\r\n  await exhibitWidget.unmount();\r\n  await selfWidget.unmount();\r\n});\r\nmountExhibitWidget();\r\nmountSubWidget();\r\n</script>\r\n","import script from \"./WidgetMount.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./WidgetMount.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_createElementVNode","id","_hoisted_5","_hoisted_6","_hoisted_7","_defineComponent","__name","setup","__props","activeKey","ref","selfWidget","exhibitWidget","selfWidgetApi","exhibitWidgetApi","add","value","changeMe","add2","reload","obj","then","result","console","log","mountSubWidget","async","subData","freelogApp","getSelfDependencyTree","forEach","sub","articleName","mountArticleWidget","articleId","parentNid","nid","topExhibitId","getTopExhibitId","container","document","getElementById","renderWidgetOptions","data","name","registerApi","api","lifeCycles","mounted","e","seq","widget_entry","mountExhibitWidget","res","getExhibitListByPaging","articleResourceTypes","isLoadVersionProperty","widgets","dataList","widget","index","articleInfo","exhibitId","property","versionInfo","exhibitProperty","dependencyTree","onBeforeUnmount","unmount","_ctx","_cache","_component_a_button","_resolveComponent","_component_a_tab_pane","_component_a_tabs","_openBlock","_createElementBlock","_createVNode","$event","default","_withCtx","key","tab","type","onClick","_createTextVNode","_","_unref","__exports__"],"sourceRoot":""}