{"version":3,"file":"static/js/251.bd0b114d.js","mappings":"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","sources":["webpack://vue3-ts-theme-/./src/views/widget/WidgetMount.vue?397b","webpack://vue3-ts-theme-/./src/views/widget/WidgetMount.vue","webpack://vue3-ts-theme-/./src/views/widget/WidgetMount.vue?139e"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, unref as _unref, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"w-100x h-100x p-40 flex-column\" }\nconst _hoisted_2 = { class: \"flex-column\" }\nconst _hoisted_3 = { class: \"flex-row mb-20\" }\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"freelog-self\" }, null, -1)\nconst _hoisted_5 = { class: \"flex-column\" }\nconst _hoisted_6 = { class: \"flex-row mb-20\" }\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"freelog-exhibit\" }, null, -1)\n\nimport { freelogApp } from \"freelog-runtime\";\r\nimport { onBeforeUnmount, ref } from \"vue\";\r\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'WidgetMount',\n  setup(__props) {\n\r\nconst activeKey = ref(\"1\");\r\nlet selfWidget: any = null;\r\nlet exhibitWidget: any = null;\r\n\r\nconst add = () => {\r\n  // 获取插件暴露的api\r\n  selfWidget.getApi().changeMe();\r\n  console.log(selfWidget);\r\n};\r\nconst add2 = () => {\r\n  // 获取插件暴露的api\r\n  exhibitWidget.getApi().changeMe();\r\n};\r\nconst reload = (obj: any) => {\r\n  obj.reload().then((result: string) => {\r\n    if (result) {\r\n      console.log(\"重新渲染成功\");\r\n    } else {\r\n      console.log(\"重新渲染失败\");\r\n    }\r\n  });\r\n};\r\nconst mountSubWidget = async () => {\r\n  const subData = await freelogApp.getSubDep();\r\n  subData.subDep.forEach(async (sub: any, index: number) => {\r\n    if (sub.name === \"snnaenu/插件开发演示代码插件\") {\r\n      selfWidget = await freelogApp.mountWidget({\r\n        widget: sub, // 必传，子插件数据\r\n        container: document.getElementById(\"freelog-self\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        topExhibitData: subData, // 必传，最外层展品数据（子孙插件都需要用）\r\n        renderWidgetOptions: {\r\n          data: { type: \"类型\" },\r\n          lifeCycles: {\r\n            mounted: (e: CustomEvent) => {\r\n              console.log(e,\"mounted\")\r\n            },\r\n          },\r\n        },\r\n        config: {\r\n          name: \"我是主题依赖的插件\",\r\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\r\n        seq: 0, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n      // 使用此函数可以保证在插件加载完成后 再执行\r\n      // selfWidget.mountPromise.then(() => {\r\n      //  // do something\r\n      // });\r\n      selfWidget.setData({ name: \"jack\" });\r\n      selfWidget.addDataListener((data: any) => {\r\n        console.log(data, 3333);\r\n      });\r\n    }\r\n  });\r\n};\r\nconst mountExhibitWidget = async () => {\r\n  const res: any = await freelogApp.getExhibitListByPaging({\r\n    articleResourceTypes: \"插件\",\r\n    isLoadVersionProperty: 1,\r\n  });\r\n  const widgets = res.data.data?.dataList;\r\n\r\n  widgets.forEach(async (widget: any, index: number) => {\r\n    console.log(widget, \"snnaenu/插件开发演示代码插件\");\r\n\r\n    if (widget.articleInfo.articleName == \"snnaenu/插件开发演示代码插件\") {\r\n      // widget.exhibitId = widget.exhibitId + '111'\r\n      exhibitWidget = await freelogApp.mountWidget({\r\n        widget: widget, // 必传，子插件数据\r\n        container: document.getElementById(\"freelog-exhibit\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        topExhibitData: null, // 必传，最外层展品数据（子孙插件都需要用）\r\n        renderWidgetOptions: {\r\n          data: { type: \"类型\" },\r\n        },\r\n        config: {\r\n          name: \"我是展品类型的插件\",\r\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\r\n        seq: 1, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n};\r\n// 离开记得卸载插件喔\r\nonBeforeUnmount(async () => {\r\n  await exhibitWidget.unmount();\r\n  await selfWidget.unmount();\r\n});\r\nmountExhibitWidget();\r\nmountSubWidget();\r\n\nreturn (_ctx: any,_cache: any) => {\n  const _component_a_button = _resolveComponent(\"a-button\")!\n  const _component_a_tab_pane = _resolveComponent(\"a-tab-pane\")!\n  const _component_a_tabs = _resolveComponent(\"a-tabs\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_a_tabs, {\n      activeKey: activeKey.value,\n      \"onUpdate:activeKey\": _cache[2] || (_cache[2] = ($event: any) => ((activeKey).value = $event))\n    }, {\n      default: _withCtx(() => [\n        _createVNode(_component_a_tab_pane, {\n          key: \"1\",\n          tab: \"加载自身依赖的插件\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_2, [\n              _createElementVNode(\"div\", _hoisted_3, [\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: add\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"给自身依赖插件加1\")\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: _cache[0] || (_cache[0] = ($event: any) => (reload(_unref(selfWidget))))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"重新加载\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _hoisted_4\n            ])\n          ]),\n          _: 1\n        }),\n        _createVNode(_component_a_tab_pane, {\n          key: \"2\",\n          tab: \"加载展品类型的插件\",\n          \"force-render\": \"\"\n        }, {\n          default: _withCtx(() => [\n            _createElementVNode(\"div\", _hoisted_5, [\n              _createElementVNode(\"div\", _hoisted_6, [\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: add2\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"给展品依赖插件加1\")\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_a_button, {\n                  type: \"primary mr-30\",\n                  onClick: _cache[1] || (_cache[1] = ($event: any) => (reload(_unref(exhibitWidget))))\n                }, {\n                  default: _withCtx(() => [\n                    _createTextVNode(\"重新加载\")\n                  ]),\n                  _: 1\n                })\n              ]),\n              _hoisted_7\n            ])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }, 8, [\"activeKey\"])\n  ]))\n}\n}\n\n})","<!-- eslint-disable @typescript-eslint/no-unused-vars -->\r\n<!-- eslint-disable @typescript-eslint/no-explicit-any -->\r\n<template>\r\n  <div class=\"w-100x h-100x p-40 flex-column\">\r\n    <a-tabs v-model:activeKey=\"activeKey\">\r\n      <a-tab-pane key=\"1\" tab=\"加载自身依赖的插件\">\r\n        <div class=\"flex-column\">\r\n          <div class=\"flex-row mb-20\">\r\n            <a-button type=\"primary mr-30\" @click=\"add\"\r\n              >给自身依赖插件加1</a-button\r\n            >\r\n            <a-button type=\"primary mr-30\" @click=\"reload(selfWidget)\"\r\n              >重新加载</a-button\r\n            >\r\n          </div>\r\n          <div id=\"freelog-self\"></div>\r\n        </div>\r\n      </a-tab-pane>\r\n      <a-tab-pane key=\"2\" tab=\"加载展品类型的插件\" force-render>\r\n        <div class=\"flex-column\">\r\n          <div class=\"flex-row mb-20\">\r\n            <a-button type=\"primary mr-30\" @click=\"add2\"\r\n              >给展品依赖插件加1</a-button\r\n            >\r\n            <a-button type=\"primary mr-30\" @click=\"reload(exhibitWidget)\"\r\n              >重新加载</a-button\r\n            >\r\n          </div>\r\n          <div id=\"freelog-exhibit\"></div>\r\n        </div>\r\n      </a-tab-pane>\r\n    </a-tabs>\r\n  </div>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { freelogApp } from \"freelog-runtime\";\r\nimport { onBeforeUnmount, ref } from \"vue\";\r\nconst activeKey = ref(\"1\");\r\nlet selfWidget: any = null;\r\nlet exhibitWidget: any = null;\r\n\r\nconst add = () => {\r\n  // 获取插件暴露的api\r\n  selfWidget.getApi().changeMe();\r\n  console.log(selfWidget);\r\n};\r\nconst add2 = () => {\r\n  // 获取插件暴露的api\r\n  exhibitWidget.getApi().changeMe();\r\n};\r\nconst reload = (obj: any) => {\r\n  obj.reload().then((result: string) => {\r\n    if (result) {\r\n      console.log(\"重新渲染成功\");\r\n    } else {\r\n      console.log(\"重新渲染失败\");\r\n    }\r\n  });\r\n};\r\nconst mountSubWidget = async () => {\r\n  const subData = await freelogApp.getSubDep();\r\n  subData.subDep.forEach(async (sub: any, index: number) => {\r\n    if (sub.name === \"snnaenu/插件开发演示代码插件\") {\r\n      selfWidget = await freelogApp.mountWidget({\r\n        widget: sub, // 必传，子插件数据\r\n        container: document.getElementById(\"freelog-self\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        topExhibitData: subData, // 必传，最外层展品数据（子孙插件都需要用）\r\n        renderWidgetOptions: {\r\n          data: { type: \"类型\" },\r\n          lifeCycles: {\r\n            mounted: (e: CustomEvent) => {\r\n              console.log(e,\"mounted\")\r\n            },\r\n          },\r\n        },\r\n        config: {\r\n          name: \"我是主题依赖的插件\",\r\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\r\n        seq: 0, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n      // 使用此函数可以保证在插件加载完成后 再执行\r\n      // selfWidget.mountPromise.then(() => {\r\n      //  // do something\r\n      // });\r\n      selfWidget.setData({ name: \"jack\" });\r\n      selfWidget.addDataListener((data: any) => {\r\n        console.log(data, 3333);\r\n      });\r\n    }\r\n  });\r\n};\r\nconst mountExhibitWidget = async () => {\r\n  const res: any = await freelogApp.getExhibitListByPaging({\r\n    articleResourceTypes: \"插件\",\r\n    isLoadVersionProperty: 1,\r\n  });\r\n  const widgets = res.data.data?.dataList;\r\n\r\n  widgets.forEach(async (widget: any, index: number) => {\r\n    console.log(widget, \"snnaenu/插件开发演示代码插件\");\r\n\r\n    if (widget.articleInfo.articleName == \"snnaenu/插件开发演示代码插件\") {\r\n      // widget.exhibitId = widget.exhibitId + '111'\r\n      exhibitWidget = await freelogApp.mountWidget({\r\n        widget: widget, // 必传，子插件数据\r\n        container: document.getElementById(\"freelog-exhibit\") as HTMLElement, // 必传，自定义一个让插件挂载的div容器\r\n        topExhibitData: null, // 必传，最外层展品数据（子孙插件都需要用）\r\n        renderWidgetOptions: {\r\n          data: { type: \"类型\" },\r\n        },\r\n        config: {\r\n          name: \"我是展品类型的插件\",\r\n        }, // 传递给子插件配置数据，会合并到作品上的配置数据\r\n        seq: 1, // 如果要用多个同样的子插件需要传递序号，可以考虑与其余节点插件避免相同的序号, 注意用户数据是根据插件id+序号保存的。\r\n        widget_entry: \"https://localhost:8102\", // 本地url，dev模式下，可以使用本地url调试子插件\r\n      });\r\n      return true;\r\n    }\r\n    return false;\r\n  });\r\n};\r\n// 离开记得卸载插件喔\r\nonBeforeUnmount(async () => {\r\n  await exhibitWidget.unmount();\r\n  await selfWidget.unmount();\r\n});\r\nmountExhibitWidget();\r\nmountSubWidget();\r\n</script>\r\n","import script from \"./WidgetMount.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./WidgetMount.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"names":["_hoisted_1","class","_hoisted_2","_hoisted_3","_hoisted_4","_createElementVNode","id","_hoisted_5","_hoisted_6","_hoisted_7","_defineComponent","__name","setup","__props","activeKey","ref","selfWidget","exhibitWidget","add","getApi","changeMe","console","log","add2","reload","obj","then","result","mountSubWidget","async","subData","freelogApp","getSubDep","subDep","forEach","sub","index","name","mountWidget","widget","container","document","getElementById","topExhibitData","renderWidgetOptions","data","type","lifeCycles","mounted","e","config","seq","widget_entry","setData","addDataListener","mountExhibitWidget","res","getExhibitListByPaging","articleResourceTypes","isLoadVersionProperty","widgets","dataList","articleInfo","articleName","onBeforeUnmount","unmount","_ctx","_cache","_component_a_button","_resolveComponent","_component_a_tab_pane","_component_a_tabs","_openBlock","_createElementBlock","_createVNode","value","$event","default","_withCtx","key","tab","onClick","_createTextVNode","_","_unref","__exports__"],"sourceRoot":""}